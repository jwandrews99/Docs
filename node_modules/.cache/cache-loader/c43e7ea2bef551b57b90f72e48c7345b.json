{"remainingRequest":"/Users/jack/Documents/GitHub/Docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/jack/Documents/GitHub/Docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/jack/Documents/GitHub/Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/jack/Documents/GitHub/Docs/docs/js/fund/variables.md","dependencies":[{"path":"/Users/jack/Documents/GitHub/Docs/docs/js/fund/variables.md","mtime":1585356717573},{"path":"/Users/jack/Documents/GitHub/Docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-js-fund-variables-md-053.json","mtime":1585395212793},{"path":"/Users/jack/Documents/GitHub/Docs/node_modules/cache-loader/dist/cjs.js","mtime":1585256602861},{"path":"/Users/jack/Documents/GitHub/Docs/node_modules/babel-loader/lib/index.js","mtime":1585256602734},{"path":"/Users/jack/Documents/GitHub/Docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1585256621747},{"path":"/Users/jack/Documents/GitHub/Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1585256618966}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2phY2svRG9jdW1lbnRzL0dpdEh1Yi9Eb2NzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2pzX3ZhcicsdGl0bGU6J1ZhcmlhYmxlcyBpbiBKUyd9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17ImlkIjoianMvZnVuZC9qc192YXIiLCJ0aXRsZSI6IlZhcmlhYmxlcyBpbiBKUyIsImRlc2NyaXB0aW9uIjoiIyMgRnVuZGFtZW50YWxzIG9mIFZhcmlhYmxlczoiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2pzL2Z1bmQvdmFyaWFibGVzLm1kIiwicGVybWFsaW5rIjoiL2RvY3MvanMvZnVuZC9qc192YXIifTsvKiBAanN4IG1keCAqL2V4cG9ydCBjb25zdCByaWdodFRvYz1be3ZhbHVlOidGdW5kYW1lbnRhbHMgb2YgVmFyaWFibGVzOicsaWQ6J2Z1bmRhbWVudGFscy1vZi12YXJpYWJsZXMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0NyZWF0aW5nIGEgVmFyaWFibGUnLGlkOidjcmVhdGluZy1hLXZhcmlhYmxlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidNYXRoZW1hdGljYWwgQXNzaWdubWVudCBPcGVyYXRvcnMnLGlkOidtYXRoZW1hdGljYWwtYXNzaWdubWVudC1vcGVyYXRvcnMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1RoZSBJbmNyZW1lbnQgYW5kIERlY3JlbWVudCBPcGVyYXRvcicsaWQ6J3RoZS1pbmNyZW1lbnQtYW5kLWRlY3JlbWVudC1vcGVyYXRvcicsY2hpbGRyZW46W119LHt2YWx1ZTonU3RyaW5nIEludGVycG9sYXRpb24nLGlkOidzdHJpbmctaW50ZXJwb2xhdGlvbicsY2hpbGRyZW46W119LHt2YWx1ZTonVHlwZW9mIE9wZXJhdG9yJyxpZDondHlwZW9mLW9wZXJhdG9yJyxjaGlsZHJlbjpbXX1dO2NvbnN0IG1ha2VTaG9ydGNvZGU9bmFtZT0+ZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307Y29uc3QgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgyIix7ImlkIjoiZnVuZGFtZW50YWxzLW9mLXZhcmlhYmxlcyJ9LGBGdW5kYW1lbnRhbHMgb2YgVmFyaWFibGVzOmApLG1keCgicCIsbnVsbCxgSW4gcHJvZ3JhbW1pbmcsIGEgdmFyaWFibGUgaXMgYSBjb250YWluZXIgZm9yIGEgdmFsdWUuIFlvdSBjYW4gdGhpbmsgb2YgdmFyaWFibGVzIGFzIGxpdHRsZSBjb250YWluZXJzIGZvciBpbmZvcm1hdGlvbiB0aGF0IGxpdmUgaW4gYSBjb21wdXRlcuKAmXMgbWVtb3J5LiBJbmZvcm1hdGlvbiBzdG9yZWQgaW4gdmFyaWFibGVzLCBzdWNoIGFzIGEgdXNlcm5hbWUsIGFjY291bnQgbnVtYmVyLCBvciBldmVuIHBlcnNvbmFsaXplZCBncmVldGluZyBjYW4gdGhlbiBiZSBmb3VuZCBpbiBtZW1vcnkuYCksbWR4KCJwIixudWxsLGBWYXJpYWJsZXMgYWxzbyBwcm92aWRlIGEgd2F5IG9mIGxhYmVsaW5nIGRhdGEgd2l0aCBhIGRlc2NyaXB0aXZlIG5hbWUsIHNvIG91ciBwcm9ncmFtcyBjYW4gYmUgdW5kZXJzdG9vZCBtb3JlIGNsZWFybHkgYnkgdGhlIHJlYWRlciBhbmQgb3Vyc2VsdmVzLmApLG1keCgiaDIiLHsiaWQiOiJjcmVhdGluZy1hLXZhcmlhYmxlIn0sYENyZWF0aW5nIGEgVmFyaWFibGVgKSxtZHgoInAiLG51bGwsYFRoZXJlIGFyZSB0aHJlZSB3YXlzIHRvIGNyZWF0ZSBhIHZhcmlhYmxlIGAsYChgLGB2YXIsIGxldCBhbmQgY29uc3RgLGApYCxgLiBFeGFtcGxlIG9mIGEgYmFzaWMgdmFyaWFibGU6IGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGB2YXIgbXlOYW1lID0gJ0FyeWEnO2ApKSxtZHgoInAiLG51bGwsYEdlbmVyYWwgUnVsZXMgYXJlIHZhcmlhYmxlcyBjYW5ub3Qgc3RhcnQgd2l0aCBudW1iZXJzLCB0aGV5IGFyZSBjYXNlIHNlbnNpdGl2ZSBhbmQgY2Fubm90IGJlIHRoZSBzYW1lIGFzIGtleXdvcmRzLiAgS2V5d29yZCBEb2N1bWVudGF0aW9uOiBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9MZXhpY2FsX2dyYW1tYXIjS2V5d29yZHMifSksYGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0xleGljYWxgLGBfYCxgZ3JhbW1hcmAsYCNgLGBLZXl3b3Jkc2ApKSxtZHgoInAiLG51bGwsYExldCBhbmQgY29uc3QgYXJlIG5vdyB0aGUgcHJlZmVyZWQga2V5d29yZHMgaW4gdmFyaWFibGVzLiBDb25zdCBpcyBhbHNvIGEgdmFyaWFibGUgdGhhdHMgdmFsdWUgY2Fubm90IGJlIGFsdGVyZWQuIE9uIHRoZSBvdGhlciBoYW5kIHRoZSBsZXQgdmFyaWFibGUgY2FuIGJlIGFsdGVyZWQuYCksbWR4KCJwIixudWxsLGBJZiB5b3UgdHJ5IHRvIHJlYXNzaWduIGEgY29uc3QgdmFyaWFibGUsIHlvdeKAmWxsIGdldCBhIFR5cGVFcnJvci4gIENvbnN0YW50IHZhcmlhYmxlcyBtdXN0IGJlIGFzc2lnbmVkIGEgdmFsdWUgd2hlbiBkZWNsYXJlZC4gSWYgeW91IHRyeSB0byBkZWNsYXJlIGEgY29uc3QgdmFyaWFibGUgd2l0aG91dCBhIHZhbHVlLCB5b3XigJlsbCBnZXQgYSBTeW50YXhFcnJvci5gKSxtZHgoImgyIix7ImlkIjoibWF0aGVtYXRpY2FsLWFzc2lnbm1lbnQtb3BlcmF0b3JzIn0sYE1hdGhlbWF0aWNhbCBBc3NpZ25tZW50IE9wZXJhdG9yc2ApLG1keCgicCIsbnVsbCxgTWF0aCBhbmQgdmFyaWFibGVzIGNhbiBiZSB1c2VkIHRvZ2V0aGVyLiBcXGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtdGV4dCJ9KSxgbGV0IHcgPSA0Owp3ID0gdyArIDE7Cgpjb25zb2xlLmxvZyh3KTsgLy8gT3V0cHV0OiA1CmApKSxtZHgoImgyIix7ImlkIjoidGhlLWluY3JlbWVudC1hbmQtZGVjcmVtZW50LW9wZXJhdG9yIn0sYFRoZSBJbmNyZW1lbnQgYW5kIERlY3JlbWVudCBPcGVyYXRvcmApLG1keCgicCIsbnVsbCxgaW5jcmVtZW50IG9wZXJhdG9yIGAsYChgLGArK2AsYClgLGAgYW5kIGRlY3JlbWVudCBvcGVyYXRvciBgLGAoYCxgLS1gLGApYCksbWR4KCJwIixudWxsLGBUaGUgaW5jcmVtZW50IG9wZXJhdG9yIHdpbGwgaW5jcmVhc2UgdGhlIHZhbHVlIG9mIHRoZSB2YXJpYWJsZSBieSAxLiBUaGUgZGVjcmVtZW50IG9wZXJhdG9yIHdpbGwgZGVjcmVhc2UgdGhlIHZhbHVlIG9mIHRoZSB2YXJpYWJsZSBieSAxLmApLG1keCgicCIsbnVsbCxgRXhhbXBsZXNgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXRleHQifSksYGxldCBhID0gMTA7CmErKzsKY29uc29sZS5sb2coYSk7IC8vIE91dHB1dDogMTEKYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtdGV4dCJ9KSxgbGV0IGIgPSAyMDsKYi0tOwpjb25zb2xlLmxvZyhiKTsgLy8gT3V0cHV0OiAxOQpgKSksbWR4KCJoMiIseyJpZCI6InN0cmluZy1pbnRlcnBvbGF0aW9uIn0sYFN0cmluZyBJbnRlcnBvbGF0aW9uYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS10ZXh0In0pLGBjb25zdCBteVBldCA9ICdhcm1hZGlsbG8nOwpjb25zb2xlLmxvZyhcYEkgb3duIGEgcGV0IFwke215UGV0fS5cYCk7Ci8vIE91dHB1dDogSSBvd24gYSBwZXQgYXJtYWRpbGxvLgpgKSksbWR4KCJwIixudWxsLGBPbmUgb2YgdGhlIGJpZ2dlc3QgYmVuZWZpdHMgdG8gdXNpbmcgdGVtcGxhdGUgbGl0ZXJhbHMgaXMgdGhlIHJlYWRhYmlsaXR5IG9mIHRoZSBjb2RlLiBVc2luZyB0ZW1wbGF0ZSBsaXRlcmFscywgeW91IGNhbiBtb3JlIGVhc2lseSB0ZWxsIHdoYXQgdGhlIG5ldyBzdHJpbmcgd2lsbCBiZS4gWW91IGFsc28gZG9u4oCZdCBoYXZlIHRvIHdvcnJ5IGFib3V0IGVzY2FwaW5nIGRvdWJsZSBxdW90ZXMgb3Igc2luZ2xlIHF1b3Rlcy5gKSxtZHgoImgyIix7ImlkIjoidHlwZW9mLW9wZXJhdG9yIn0sYFR5cGVvZiBPcGVyYXRvcmApLG1keCgicCIsbnVsbCxgSXQgY2FuIGJlIHVzZWZ1bCB0byBrZWVwIHRyYWNrIG9mIHRoZSBkYXRhIHR5cGVzIG9mIHRoZSB2YXJpYWJsZXMgaW4geW91ciBwcm9ncmFtLiBJZiB5b3UgbmVlZCB0byBjaGVjayB0aGUgZGF0YSB0eXBlIG9mIGEgdmFyaWFibGXigJlzIHZhbHVlLCB5b3UgY2FuIHVzZSB0aGUgdHlwZW9mIG9wZXJhdG9yLmApLG1keCgicCIsbnVsbCxgVGhlIHR5cGVvZm9wZXJhdG9yIGNoZWNrcyB0aGUgdmFsdWUgdG8gaXRzIHJpZ2h0IGFuZCByZXR1cm5zLCBvciBwYXNzZXMgYmFjaywgYSBzdHJpbmcgb2YgdGhlIGRhdGEgdHlwZS5gKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXRleHQifSksYGNvbnN0IHVua25vd24xID0gJ2Zvbyc7CmNvbnNvbGUubG9nKHR5cGVvZiB1bmtub3duMSk7IC8vIE91dHB1dDogc3RyaW5nCgpjb25zdCB1bmtub3duMiA9IDEwOwpjb25zb2xlLmxvZyh0eXBlb2YgdW5rbm93bjIpOyAvLyBPdXRwdXQ6IG51bWJlcgoKY29uc3QgdW5rbm93bjMgPSB0cnVlOyAKY29uc29sZS5sb2codHlwZW9mIHVua25vd24zKTsgLy8gT3V0cHV0OiBib29sZWFuCmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}